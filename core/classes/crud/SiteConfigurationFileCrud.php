<?php
/**
 * Created by Sevi Donnelly Foreman.
 * Date: 2019-03-07
 * Time: 17:10
 */

namespace DarlingCms\classes\crud;


use DarlingCms\classes\config\SiteConfiguration;
use DarlingCms\classes\config\SiteConfigurationSetting;
use DarlingCms\interfaces\config\ISiteConfiguration;
use DarlingCms\interfaces\crud\ISiteConfigurationCrud;

/**
 * Class SiteConfigurationFileCrud. Defines an implementation of the ISiteConfigurationCrud interface
 * that can be used to perform crud operations on site configurations that are stored in a specific file.
 *
 * Note: An instance of this class is intended to perform crud operations on a single site configuration file.
 * To perform crud operations on more than one site configuration file would require multiple instances of this
 * class.
 *
 * Example:
 *
 * $sConfigA = new SiteConfigurationFileCrud('path/to/siteConfigA.config.ini');
 *
 * $sConfigB = new SiteConfigurationFileCrud('path/to/siteConfigB.config.ini');
 * @package DarlingCms\classes\crud
 * @see ISiteConfigurationCrud
 */
class SiteConfigurationFileCrud implements ISiteConfigurationCrud
{

    /**
     * @var string $siteConfigurationPath The path to the site configuration file this SiteConfigurationFileCrud
     *                                    performs crud operations on.
     */
    private $siteConfigurationPath;

    /**
     * @var bool Determines whether or not read errors should be reported.
     */
    private $reportReadErrors = true;

    /**
     * SiteConfigurationFileCrud constructor. Sets the path to the configuration file this SiteConfigurationFileCrud
     * instance will perform crud operations on.
     *
     * Note: This method will attempt to create the configuration file if it does not already exist.
     *
     * @param string $siteConfigurationPath Path to the site configuration file this SiteConfigurationFileCrud
     *                                      performs crud operations on.
     */
    public function __construct(string $siteConfigurationPath)
    {
        $this->siteConfigurationPath = $siteConfigurationPath;
        if (file_exists($this->getSiteConfigurationFilePath()) === false) {
            if (empty(file_put_contents($siteConfigurationPath, $this->getAutoGenMsg(), LOCK_EX)) === true) {
                error_log('SiteConfigurationFileCrud Error: Failed to create Site Configuration at file at path ' . $this->siteConfigurationPath);
            }
        }
    }

    /**
     * Returns the message used to indicate that a site configuration file was generated by an
     * instance of this class.
     * @return string The message used to indicate that a site configuration file was generated by an
     *                instance of this class.
     */
    private function getAutoGenMsg(): string
    {
        return '; Auto-generated Darling Cms Site Configuration File' . PHP_EOL .
            ';' . PHP_EOL .
            '; This file was generated by an instance of the ' . get_class($this) . PHP_EOL . '; class on ' . date("l F d Y") . ' at ' . date("h:i:sa") . ' (timestamp: ' . time() . ')' . PHP_EOL .
            ';' . PHP_EOL .
            '; WARNING: Editing this file by hand may have unintended consequences, only do so' . PHP_EOL .
            '; if you know exactly what you are doing!' . PHP_EOL .
            ';' . PHP_EOL .
            '; WARNING: Darling Cms ini files MUST only use strings to define setting values, and strings MUST use' . PHP_EOL .
            '; double quotes ("")' . PHP_EOL .
            '; e.g.,' . PHP_EOL .
            ';' . PHP_EOL .
            '; settingName = "true"; good' . PHP_EOL .
            '; settingName = true; bad' . PHP_EOL .
            ';' . PHP_EOL .
            '; settingName = "123"; good' . PHP_EOL .
            '; settingName = 123; bad' . PHP_EOL .
            ';' . PHP_EOL .
            '; settingName = "420.09"; good' . PHP_EOL .
            '; settingName = \'420.09\'; bad' . PHP_EOL .
            ';' . PHP_EOL;
    }

    /**
     * Create a new site configuration.
     * @param ISiteConfiguration $siteConfiguration The ISiteConfiguration implementation instance
     *                                              that represents the site configuration.
     * @return bool True if site configuration was created successfully, false otherwise.
     */
    public function create(ISiteConfiguration $siteConfiguration): bool
    {
        if ($this->configurationExists($siteConfiguration->getConfigurationName()) === true) {
            error_log('SiteConfigurationFileCrud Error: Failed to create new configuration ' . $siteConfiguration->getConfigurationName() . ' because a configuration with the same name already exists. Try updating instead.');
            return false;
        }
        if (empty(file_put_contents($this->getSiteConfigurationFilePath(), $this->getConfigurationText($siteConfiguration), FILE_APPEND | LOCK_EX)) === true) {
            error_log('SiteConfigurationFileCrud Error: Failed to create new configuration ' . $siteConfiguration->getConfigurationName() . '.');
            return false;
        }
        return true;
    }

    /**
     * Returns a site configuration string for the supplied ISiteConfiguration implementation instance.
     *
     * The string will be formatted as follows:
     *
     * ; CONFIGURATION DESCRIPTION
     *
     * [CONFIGURATION_NAME]
     *
     * ; CONFIGURATION SETTING DESCRIPTION
     *
     * CONFIGURATION_SETTING = "CONFIGURATION VALUE"
     *
     * @param ISiteConfiguration $siteConfiguration The site configuration to generate a configuration string for.
     * @return string A site configuration string for the supplied ISiteConfiguration implementation instance.
     */
    private function getConfigurationText(ISiteConfiguration $siteConfiguration): string
    {
        $configText = PHP_EOL . '; ' . $siteConfiguration->getConfigurationDescription() . PHP_EOL;
        $configText .= '[' . $siteConfiguration->getConfigurationName() . ']';
        foreach ($siteConfiguration->getConfigurationSettings() as $setting) {
            $settingText = (PHP_EOL . '; ' . $setting->getDescription() . PHP_EOL . $setting->getSettingName() . ' = "' . $setting->getSettingValue() . '"' . PHP_EOL);
            $configText .= $settingText;
        }
        return $configText;
    }

    /**
     * Returns an array of all site configurations stored in the site configuration file
     * this crud performs crud operations on.
     * @return array|ISiteConfiguration[] Array of all site configurations stored in the
     *                                    site configuration file this crud performs crud
     *                                    operations on.
     */
    private function readAll(): array
    {
        $configurations = $this->readRaw();
        $siteConfigurations = array();
        foreach ($configurations as $configurationName => $configuration) {
            $settings = array();
            foreach ($configuration as $settingName => $settingValue) {
                array_push($settings, new SiteConfigurationSetting($settingName, $settingValue, $this->readConfigurationSettingDescription($settingName)));
            }
            $siteConfiguration = new SiteConfiguration($configurationName, $this->readConfigurationDescription($configurationName));
            foreach ($settings as $setting) {
                $siteConfiguration->addSetting($setting);
            }
            array_push($siteConfigurations, $siteConfiguration);
        }
        return $siteConfigurations;
    }

    /**
     * Returns an array of the raw site configuration data.
     * @return array Array of the raw site configuration data.
     */
    private function readRaw(): array
    {
        $rawData = parse_ini_file($this->getSiteConfigurationFilePath(), true);
        return (empty($rawData) === false ? $rawData : []);
    }

    /**
     * Read the specified site configuration's description from the site configuration file.
     *
     * Note: This method will return a default description if the actual description is not found.
     *
     * Default Description will always be the following:
     * "$siteConfigurationName: @todo Please describe this configuration..."
     * @param string $siteConfigurationName The name of the site configuration whose description should be read.
     * @return string The site configuration's description, or the default description if the actual description
     *                cannot be found.
     */
    private function readConfigurationDescription(string $siteConfigurationName): string
    {
        $configFile = $this->readConfigFileArray();
        foreach ($configFile as $lineNumber => $lineData) {
            $searchName = '[' . $siteConfigurationName . ']';
            $targetLine = bcsub($lineNumber, 1, 0);
            /**
             * If search name matches the trimmed line data and the previous line beings
             * with a semi-colon (;), then return the previous line as this is most likely
             * the the comment that serves as the configuration description.
             */
            if ($searchName === trim($lineData) && $configFile[$targetLine][0] === ';') {
                return trim(ltrim($configFile[$targetLine], ';'));
            }
        }
        return $siteConfigurationName . ': @todo Please describe this configuration...';
    }

    /**
     * Read the specified site configuration setting's description from the site configuration file.
     *
     * Note: This method will return a default description if the actual description is not found.
     *
     * Default Description will always be the following:
     * "$siteConfigurationSettingName: @todo Please describe this setting..."
     * @param string $siteConfigurationSettingName The name of the site configuration setting whose
     *                                             description should be read.
     * @return string The site configuration setting's description, or the default description if
     *                the actual description cannot be found.
     */
    private function readConfigurationSettingDescription(string $siteConfigurationSettingName): string
    {
        $configFile = $this->readConfigFileArray();
        foreach ($configFile as $lineNumber => $lineData) {
            $searchName = trim($siteConfigurationSettingName);
            $searchData = trim(substr($lineData, 0, strlen($searchName)));
            $targetLine = bcsub($lineNumber, 1, 0);
            /**
             * If search name matches the trimmed line data and the previous line beings
             * with a semi-colon (;), then return the previous line as this is most likely
             * the the comment that serves as the configuration description.
             */
            if ($searchName === $searchData) {
                return trim(ltrim($configFile[$targetLine], ';'));
            }
        }
        return $siteConfigurationSettingName . ': @todo Please describe this setting...';
    }

    /**
     * Returns an array of the site configuration file's contents.
     * Note: This method will return an empty array if the site configuration
     * file does not exist, or if it is empty.
     * @return array An array of the site configuration files contents.
     */
    private function readConfigFileArray(): array
    {
        $fileArray = file($this->getSiteConfigurationFilePath());
        return (empty($fileArray) === false ? $fileArray : []);
    }

    /**
     * Read a specified site configuration.
     *
     * Note: This method will return a SiteConfiguration implementation
     * instance with no name, description, or settings if the specified
     * site configuration could not be read.
     * @param string $configurationName The name of the configuration to read.
     * @return ISiteConfiguration The specified ISiteConfiguration implementation instance,
     *                            or a SiteConfiguration implementation instance with no name,
     *                            description, or settings if the specified site configuration
     *                            could not be read.
     * @see SiteConfiguration
     * @see ISiteConfiguration
     */
    public function read(string $configurationName): ISiteConfiguration
    {
        foreach ($this->readAll() as $siteConfiguration) {
            if ($configurationName === $siteConfiguration->getConfigurationName()) {
                return $siteConfiguration;
            }
        }
        if ($this->reportReadErrors === true) {
            error_log('Site Configuration File Crud Error: Failed to read the ' . $configurationName . ' site configuration.');
        }
        return new SiteConfiguration('', '');
    }

    /**
     * Update a specified site configuration.
     * @param string $configurationName The name of the site configuration to update.
     * @param ISiteConfiguration $newSiteConfiguration The ISiteConfiguration implementation
     *                                                 instance that represents the updated
     *                                                 site configuration.
     * @return bool True if update was successful, false otherwise.
     */
    public function update(string $configurationName, ISiteConfiguration $newSiteConfiguration): bool
    {
        if ($this->delete($configurationName) === true && $this->create($newSiteConfiguration) === true) {
            return true;
        }
        error_log('Site Configuration File Crud Error: Failed to update the "' . $configurationName . '" site configuration.');
        return false;
    }

    /**
     * Delete a specified site configuration.
     * @param string $configurationName The name of the site configuration to delete.
     * @return bool True if the specified site configuration was deleted, false otherwise.
     */
    public function delete(string $configurationName): bool
    {
        if ($this->configurationExists($configurationName) === true) {
            $configuration = $this->read($configurationName);
            $configFileArray = $this->readConfigFileArray();
            $this->processSettingRemoval($configuration, $configFileArray);
            $this->processConfigurationRemoval($configuration, $configFileArray);
            return !empty(file_put_contents($this->getSiteConfigurationFilePath(), $this->configArrToStr($configFileArray)));
        }
        return false;
    }

    /**
     * Convert array of site configuration file data to a string.
     * @param array $configFileArray The array of site configuration file data.
     * @return string The string generated from the array of site configuration file data.
     */
    final private function configArrToStr(array $configFileArray): string
    {
        return trim(implode('', $configFileArray)) . PHP_EOL;
    }

    /**
     * Process the removal of the specified site configuration's setting data from the specified
     * array of site configuration file data.
     * @param ISiteConfiguration $configuration The ISiteConfiguration implementation instance that
     *                                          represents the site configuration whose settings are
     *                                          to be removed.
     * @param array $configFileArray The array of the site configuration file data.
     * @return void
     * @devNote: This method was designed to be called from the delete() method, calling it anywhere
     *           else may have unexpected consequences.
     */
    final private function processSettingRemoval(ISiteConfiguration $configuration, array &$configFileArray): void
    {
        foreach ($configFileArray as $lineNumber => $lineData) {
            foreach ($configuration->getConfigurationSettings() as $setting) {
                $searchSetting = trim(str_replace(' ', '', $setting->getSettingName() . '="' . $setting->getSettingValue() . '"'));
                $searchSettingDescription = trim(str_replace(' ', '', $setting->getDescription()));
                $searchData = trim(str_replace([' ', ';'], '', $lineData));
                /**
                 * If search data matches either the search setting or the search setting description
                 * remove the data from the $configFileArray
                 */
                if ($searchSetting === $searchData || $searchSettingDescription === $searchData) {
                    unset($configFileArray[$lineNumber]);
                }
            }
        }
    }

    /**
     * Process the removal of the specified site configuration's data from the specified
     * array of site configuration file data.
     * @param ISiteConfiguration $configuration The ISiteConfiguration implementation instance that
     *                                          represents the site configuration to remove.
     * @param array $configFileArray The array of the site configuration file data.
     */
    final private function processConfigurationRemoval(ISiteConfiguration $configuration, array &$configFileArray): void
    {
        foreach ($configFileArray as $lineNumber => $lineData) {
            $searchConfigName = trim(str_replace(' ', '', '[' . $configuration->getConfigurationName() . ']'));
            $searchConfigDescription = trim(str_replace([' ', ';'], '', $configuration->getConfigurationDescription()));
            $searchData = trim(str_replace([' ', ';'], '', $lineData));
            /**
             * If search data matches either the search setting or the search setting description
             * remove the data from the $configFileArray
             */
            if ($searchConfigName === $searchData || $searchConfigDescription === $searchData) {
                unset($configFileArray[$lineNumber]);
            }
        }
    }

    /**
     * Determines if the specified configuration exists.
     * @param string $configurationName The name of the configuration to check for.
     * @return bool True if configuration exists, false otherwise.
     */
    private function configurationExists(string $configurationName): bool
    {
        $this->reportReadErrors = false;
        $configuration = $this->read($configurationName);
        $this->reportReadErrors = true;
        if (empty($configuration->getConfigurationName()) === false) {
            return true;
        }
        return false;
    }

    /**
     * Returns the path to the site configuration file this SiteConfigurationFileCrud instance
     * performs crud operations on.
     *
     * @return string The path to the site configuration file this SiteConfigurationFileCrud instance
     *                performs crud operations on.
     */
    public function getSiteConfigurationFilePath()
    {
        return $this->siteConfigurationPath;
    }

}
